// Generated by CoffeeScript 1.6.3
(function() {
  var Cell, Crossword, analyseGrid, countAnswerLength, cryptical;

  countAnswerLength = function(cells, i, j, direction) {
    var length;
    length = 0;
    if (direction === 'across') {
      while (j < cells[i].length && cells[i][j]["class"] !== 'black') {
        j++;
        length++;
      }
    }
    if (direction === 'down') {
      while (i < cells.length && cells[i][j]["class"] !== 'black') {
        i++;
        length++;
      }
    }
    return length;
  };

  analyseGrid = function(crossword) {
    var cell, cells, clues, counter, down, i, j, left, right, row, up, _i, _j, _len, _len1;
    counter = 0;
    clues = {
      across: {},
      down: {}
    };
    cells = crossword.cells;
    for (i = _i = 0, _len = cells.length; _i < _len; i = ++_i) {
      row = cells[i];
      for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
        cell = row[j];
        if (!(cell["class"] !== 'black')) {
          continue;
        }
        up = i > 0 ? cells[i - 1][j]["class"] !== 'black' : false;
        down = i + 1 < cells.length ? cells[i + 1][j]["class"] !== 'black' : false;
        left = j > 0 ? row[j - 1]["class"] !== 'black' : false;
        right = j + 1 < row.length ? row[j + 1]["class"] !== 'black' : false;
        if (right && !left) {
          cell.num = ++counter;
          if (clues.across[cell.num] == null) {
            clues.across[cell.num] = {
              length: countAnswerLength(cells, i, j, 'across')
            };
          }
        }
        if (down && !up) {
          if (!right || left) {
            cell.num = ++counter;
          }
          if (clues.down[cell.num] == null) {
            clues.down[cell.num] = {
              length: countAnswerLength(cells, i, j, 'down')
            };
          }
        }
      }
    }
    return clues;
  };

  Crossword = (function() {
    var editable, toggleCells;

    function Crossword(crosswordString, width, height) {
      this.crosswordString = crosswordString;
      this.width = width;
      this.height = height;
      if (crosswordString != null) {
        this.load(crosswordString);
      } else if (localStorage['cryptical'] != null) {
        this.load(localStorage['cryptical']);
      } else {
        this.width = 10;
        this.height = 10;
        this.random();
      }
    }

    Crossword.prototype.load = function(crosswordString) {
      var char, newCrossword, row;
      console.log('loading from this JSON:', crosswordString);
      newCrossword = angular.fromJson(crosswordString);
      this.cells = (function() {
        var _i, _len, _ref, _results;
        _ref = newCrossword.puzzle;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
              char = row[_j];
              _results1.push(new Cell(char));
            }
            return _results1;
          })());
        }
        return _results;
      })();
      this.clues = analyseGrid(this);
      if (newCrossword.clues != null) {
        this.clues = newCrossword.clues;
      }
      this.title = newCrossword.title || '(untitled)';
      this.author = newCrossword.author || '(anonymous)';
      this.width = this.cells[0].length;
      return this.height = this.cells.length;
    };

    toggleCells = false;

    editable = 'clues';

    Crossword.prototype.serialise = function() {
      var puzzle, row, stringify_cell, stringify_row;
      stringify_cell = function(cell) {
        if (cell.char === '' || cell["class"] === 'black') {
          return '@';
        } else {
          return cell.char;
        }
      };
      stringify_row = function(row) {
        var cell;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = row.length; _i < _len; _i++) {
            cell = row[_i];
            _results.push(stringify_cell(cell));
          }
          return _results;
        })()).join('');
      };
      puzzle = (function() {
        var _i, _len, _ref, _results;
        _ref = this.cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push(stringify_row(row));
        }
        return _results;
      }).call(this);
      return angular.toJson({
        puzzle: puzzle,
        clues: this.clues,
        title: this.title,
        author: this.author
      });
    };

    Crossword.prototype.random = function() {
      var r, randomChar, rowGen;
      console.log('generating random...');
      randomChar = function() {
        var validChars;
        validChars = '@ABCD';
        return validChars[Math.floor(Math.random() * validChars.length)];
      };
      rowGen = function(rowIndex, cols) {
        var _;
        return ((function() {
          var _i, _ref, _results;
          _results = [];
          for (_ = _i = 0, _ref = cols - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; _ = 0 <= _ref ? ++_i : --_i) {
            _results.push(randomChar());
          }
          return _results;
        })()).join('');
      };
      return this.load(angular.toJson({
        puzzle: (function() {
          var _i, _ref, _results;
          _results = [];
          for (r = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
            _results.push(rowGen(r, this.width));
          }
          return _results;
        }).call(this)
      }));
    };

    Crossword.prototype.blank = function() {
      var _;
      console.log('generating blank...');
      return this.load(angular.toJson({
        puzzle: (function() {
          var _i, _ref, _results;
          _results = [];
          for (_ = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; _ = 0 <= _ref ? ++_i : --_i) {
            _results.push(((function() {
              var _j, _ref1, _results1;
              _results1 = [];
              for (_ = _j = 0, _ref1 = this.width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; _ = 0 <= _ref1 ? ++_j : --_j) {
                _results1.push(' ');
              }
              return _results1;
            }).call(this)).join(''));
          }
          return _results;
        }).call(this)
      }));
    };

    return Crossword;

  })();

  Cell = (function() {
    function Cell(char, num) {
      this.char = char;
      this.num = num;
      this.char = this.char.toUpperCase();
      if (this.char === '@') {
        this.char = '';
        this["class"] = 'black';
      }
    }

    Cell.prototype.clean = function() {
      return this.char = this.char.slice(-1).toUpperCase();
    };

    Cell.prototype.toggle = function() {
      console.warn('Puzzle layout changed, may need renumbering.');
      if (this["class"] === 'black') {
        return this["class"] = '';
      } else {
        return this["class"] = 'black';
      }
    };

    return Cell;

  })();

  cryptical = angular.module('cryptical', []);

  cryptical.filter('sortObjectKeys', function() {
    return function(input) {
      var array, key, value;
      for (key in input) {
        value = input[key];
        value.num = key;
      }
      array = (function() {
        var _results;
        _results = [];
        for (key in input) {
          value = input[key];
          _results.push(value);
        }
        return _results;
      })();
      return array.sort(function(a, b) {
        return parseInt(a.num) - parseInt(b.num);
      });
    };
  });

  cryptical.controller('CrosswordCtrl', [
    '$scope', function($scope) {
      $scope.crossword = new Crossword();
      return $scope.forceUppercase = function(char) {
        var str;
        console.log(char);
        str = 'f';
        return this.value = str.toUpperCase();
      };
    }
  ]);

  cryptical.controller('CrosswordLoader', [
    '$scope', function($scope) {
      $scope.puzzles = localStorage['cryptical'];
      return console.log('puzzles:', $scope.puzzles);
    }
  ]);

  cryptical.controller('CluesCtrl', [
    '$scope', function($scope) {
      return console.log('initialising clues controller');
    }
  ]);

  cryptical.controller('ButtonsCtrl', [
    '$scope', function($scope) {
      $scope.load_local = function() {
        return $scope.crossword.load(localStorage['cryptical']);
      };
      $scope.save_local = function() {
        var data;
        data = $scope.crossword.serialise();
        console.log('saving this locally:', data);
        return localStorage['cryptical'] = data;
      };
      return $scope.refreshClues = function() {
        return $scope.crossword.clues = analyseGrid($scope.crossword);
      };
    }
  ]);

}).call(this);
